name: Build OpenClash with Kernel Version Check

on:
  push:
    branches:
      - main
  workflow_dispatch:  # 支持手动触发

jobs:
  build:
    runs-on: ubuntu-22.04  # 明确指定 Ubuntu 22.04 环境

    steps:
      - name: 1. 检出代码
        uses: actions/checkout@v4

      - name: 2. 查看初始系统信息（内核+版本）
        run: |
          echo "===== 初始系统信息 ====="
          uname -a  # 输出内核版本及系统信息
          lsb_release -a  # 输出 Ubuntu 具体版本
          echo "======================"

      - name: 3. 释放磁盘空间
        run: |
          sudo apt-get clean
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/lib/android /usr/share/swift
          df -h  # 查看磁盘占用

      - name: 4. 启用仓库并更新软件包列表
        run: |
          sudo add-apt-repository universe -y  # 启用 universe 仓库（含额外依赖）
          sudo apt-get update -y  # 更新软件包索引

      - name: 5. 安装编译依赖并升级系统（可选，视需求决定是否升级）
        run: |
          echo "===== 安装核心依赖 ====="
          sudo apt-get install -y --no-install-recommends \
            build-essential flex bison g++ gawk gcc-multilib g++-multilib gettext git \
            libfuse-dev libncurses5-dev libssl-dev python3 python3-pip python3-ply \
            python3-pyelftools rsync unzip zlib1g-dev file wget subversion patch \
            upx-ucl autoconf automake curl asciidoc binutils bzip2 lib32gcc-s1 \
            libc6-dev-i386 uglifyjs msmtp texinfo libreadline-dev libglib2.0-dev \
            xmlto libelf-dev libtool autopoint antlr3 gperf ccache swig coreutils \
            haveged scons libpython3-dev jq \
            libpam-dev liblzma-dev libsnmp-dev \
            libxattr-dev libcurl4-openssl-dev \  # 关键网络与系统调用依赖
            libgnutls28-dev libseccomp-dev libcap-dev  # 安全与加密依赖

          echo "===== 可选：升级系统软件包（谨慎！可能改变内核） ====="
          # sudo apt-get upgrade -y  # 若需升级系统（含内核），取消注释（需评估兼容性）

      - name: 6. 再次查看系统信息（内核+版本）
        run: |
          echo "===== 依赖安装后的系统信息 ====="
          uname -a  # 查看内核是否因升级而变化
          lsb_release -a  # 确认 Ubuntu 版本是否为 22.04.x
          echo "======================"

      - name: 7. 后续编译步骤（示例，可对接你的 OpenClash 编译逻辑）
        run: |
          echo "===== 开始编译 OpenClash ====="
          # 此处添加你的 OpenClash 编译命令（如克隆源码、配置、make 等）
          # 示例：
          # git clone --depth=1 https://github.com/openwrt/openwrt.git openwrt-source
          # cd openwrt-source
          # ./scripts/feeds update -a && ./scripts/feeds install -a
          # make defconfig ARCH=arm64 SUBARCH=arm64
          # make -j$(nproc) V=s

      - name: 8. 上传内核版本日志（可选，用于对比）
        uses: actions/upload-artifact@v4
        with:
          name: kernel-version-log
          path: |
            /home/runner/work/_temp_kernel_log.txt  # 若需保存日志，可先重定向输出到文件
          retention-days: 7
